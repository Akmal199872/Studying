import InputStringExpression as ise
import math as m


def choose_func(function_number):
    # list_activities = dir(m)
    # result = 0
    # for i, j in enumerate(list_activities, start=1):
    #     print(f'№{i} = Функция: "{j}"')
    # function_number = int(input("Выберите необходимую функцию: "))
    match function_number:
        case 1: result = m.__doc__(ise.calculate_plus())
        case 2: result = m.__loader__(ise.calculate_plus())
        case 3: result = m.__name__(ise.calculate_plus())
        case 4: result = m.__package__(ise.calculate_plus())
        case 5: result = m.__spec__(ise.calculate_plus())
        case 6: result = m.acos(ise.calculate_plus())
        case 7: result = m.acosh(ise.calculate_plus())
        case 8: result = m.asin(ise.calculate_plus())
        case 9: result = m.asinh(ise.calculate_plus())
        case 10: result = m.atan(ise.calculate_plus())
        case 11: result = m.atan2(ise.calculate_plus())
        case 12: result = m.atanh(ise.calculate_plus())
        case 13: result = m.ceil(ise.calculate_plus())
        case 14: result = m.comb(ise.calculate_plus())
        case 15: result = m.copysign(ise.calculate_plus())
        case 16: result = m.cos(ise.calculate_plus())
        case 17: result = m.cosh(ise.calculate_plus())
        case 18: result = m.degrees(ise.calculate_plus())
        case 19: result = m.dist(ise.calculate_plus())
        case 20: result = m.e(ise.calculate_plus())
        case 21: result = m.erf(ise.calculate_plus())
        case 22: result = m.erfc(ise.calculate_plus())
        case 23: result = m.exp(ise.calculate_plus())
        case 24: result = m.expm1(ise.calculate_plus())
        case 25: result = m.fabs(ise.calculate_plus())
        case 26: result = m.factorial(ise.calculate_plus())
        case 27: result = m.floor(ise.calculate_plus())
        case 28: result = m.fmod(ise.calculate_plus())
        case 29: result = m.frexp(ise.calculate_plus())
        case 30: result = m.fsum(ise.calculate_plus())
        case 31: result = m.gamma(ise.calculate_plus())
        case 32: result = m.gcd(ise.calculate_plus())
        case 33: result = m.hypot(ise.calculate_plus())
        case 34: result = m.inf(ise.calculate_plus())
        case 35: result = m.isclose(ise.calculate_plus())
        case 36: result = m.isfinite(ise.calculate_plus())
        case 37: result = m.isinf(ise.calculate_plus())
        case 38: result = m.isnan(ise.calculate_plus())
        case 39: result = m.isqrt(ise.calculate_plus())
        case 40: result = m.lcm(ise.calculate_plus())
        case 41: result = m.ldexp(ise.calculate_plus())
        case 42: result = m.lgamma(ise.calculate_plus())
        case 43: result = m.log(ise.calculate_plus())
        case 44: result = m.log10(ise.calculate_plus())
        case 45: result = m.log1p(ise.calculate_plus())
        case 46: result = m.log2(ise.calculate_plus())
        case 47: result = m.modf(ise.calculate_plus())
        case 48: result = m.nan(ise.calculate_plus())
        case 49: result = m.nextafter(ise.calculate_plus())
        case 50: result = m.perm(ise.calculate_plus())
        case 51: result = m.pi(ise.calculate_plus())
        case 52: result = m.pow(ise.calculate_plus())
        case 53: result = m.prod(ise.calculate_plus())
        case 54: result = m.radians(ise.calculate_plus())
        case 55: result = m.remainder(ise.calculate_plus())
        case 56: result = m.sin(ise.calculate_plus())
        case 57: result = m.sinh(ise.calculate_plus())
        case 58: result = m.sqrt(ise.calculate_plus())
        case 59: result = m.tan(ise.calculate_plus())
        case 60: result = m.tanh(ise.calculate_plus())
        case 61: result = m.tau(ise.calculate_plus())
        case 62: result = m.trunc(ise.calculate_plus())
        case 63: result = m.ulp(ise.calculate_plus())

    return result


# print(choose_func())

